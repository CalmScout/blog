{
  
    
        "post0": {
            "title": "Choropleth map of COVID-19 cases in Spain using Geopandas",
            "content": "Import libraries we will be using . import matplotlib.pyplot as plt import geopandas as gpd import pandas as pd import numpy as np from pathlib import Path import datetime plt.rcParams[&#39;figure.figsize&#39;] = [10, 5] %matplotlib inline . 1. Shape files data . Shape files define geographical regions and would be used for visualization. To download shape files clik on the link and: 1) Select from drop-down list Country: Spain 2) Select from drop-down list Subject: Administrative areas 3) Click button Ok 4) At new page click Download link and then save ESP_adm.zip archive (7.8 MB) to folder with current notebook. 5) Unzip ESP_adm.zip to ESP_adm folder in the current folder (may be done by uncommenting and running the following line of code) . A .shp file is actually just one of the 3 files that are necessary for your shape data to render — you may have noticed that a .shp file comes in a zip file when you download. This is because you also need a .dbf and a .shx file. While the .shp files gives figures their geometry, .dbf stores attribute data and object ids, and .shx provides an index that is helpful with certain software and packages (ref). . #!unzip ESP_adm.zip -d ESP_adm . Dictionary of standard region names shortcuts. We will use it later during merging .shp and tabular COVID-19 data. . codes_dictionary = { &#39;Andalucía&#39;: &#39;AN&#39;, &#39;Aragón&#39;: &#39;AR&#39;, &#39;Cantabria&#39;: &#39;CB&#39;, &#39;Castilla-La Mancha&#39;: &#39;CM&#39;, &#39;Castilla y León&#39;: &#39;CL&#39;, &#39;Cataluña&#39;: &#39;CT&#39;, &#39;Ceuta y Melilla&#39;: &#39;CE_ML&#39;, &#39;Comunidad de Madrid&#39;: &#39;MD&#39;, &#39;Comunidad Foral de Navarra&#39;: &#39;NC&#39;, &#39;Comunidad Valenciana&#39;: &#39;VC&#39;, &#39;Extremadura&#39;: &#39;EX&#39;, &#39;Galicia&#39;: &#39;GA&#39;, &#39;Islas Baleares&#39;: &#39;IB&#39;, &#39;Islas Canarias&#39;: &#39;CN&#39;, &#39;La Rioja&#39;: &#39;RI&#39;, &#39;País Vasco&#39;: &#39;PV&#39;, &#39;Principado de Asturias&#39;: &#39;AS&#39;, &#39;Región de Murcia&#39;: &#39;MC&#39; } . path = Path(&#39;ESP_adm/ESP_adm1.shp&#39;) map_df = gpd.read_file(path, encoding=&#39;latin9&#39;) map_df.head() . ID_0 ISO NAME_0 ID_1 NAME_1 TYPE_1 ENGTYPE_1 NL_NAME_1 VARNAME_1 geometry . 0 215 | ESP | Spain | 1 | AndalucÃ­a | Comunidad AutÃ³noma | Autonomous Community | None | Andalousie|AndalucÂ¡a|Andalusien|Andaluzia | MULTIPOLYGON (((-3.03014 35.94264, -3.03014 35... | . 1 215 | ESP | Spain | 2 | AragÃ³n | Comunidad AutÃ³noma | Autonomous Community | None | AragÃ£o|AragÃ³|AragÃ³n|Aragona|Aragonien | POLYGON ((-0.74582 42.92190, -0.74409 42.91921... | . 2 215 | ESP | Spain | 3 | Cantabria | Comunidad AutÃ³noma | Autonomous Community | None | CantÃ bria|CantÃ¡bria|Cantabrie|Kantabrien | MULTIPOLYGON (((-3.28365 43.20003, -3.28500 43... | . 3 215 | ESP | Spain | 4 | Castilla-La Mancha | Comunidad AutÃ³noma | Autonomous Community | None | Castela-La Mancha|Castela-Mancha|Castella-la M... | MULTIPOLYGON (((-3.36418 40.63507, -3.36655 40... | . 4 215 | ESP | Spain | 5 | Castilla y LeÃ³n | Comunidad AutÃ³noma | Autonomous Community | None | Castile and Leon|Castela e LeÃ£o|Castella i Ll... | MULTIPOLYGON (((-2.83047 42.79212, -2.82676 42... | . type(map_df) . geopandas.geodataframe.GeoDataFrame . We see above that map_df is not usual Pandas.DataFrame, but geopandas.geodataframe.GeoDataFrame object. . map_df[&#39;NAME_1&#39;] = codes_dictionary.keys() . len(map_df[&#39;NAME_1&#39;].values), map_df.NAME_1.values . (18, array([&#39;Andalucía&#39;, &#39;Aragón&#39;, &#39;Cantabria&#39;, &#39;Castilla-La Mancha&#39;, &#39;Castilla y León&#39;, &#39;Cataluña&#39;, &#39;Ceuta y Melilla&#39;, &#39;Comunidad de Madrid&#39;, &#39;Comunidad Foral de Navarra&#39;, &#39;Comunidad Valenciana&#39;, &#39;Extremadura&#39;, &#39;Galicia&#39;, &#39;Islas Baleares&#39;, &#39;Islas Canarias&#39;, &#39;La Rioja&#39;, &#39;País Vasco&#39;, &#39;Principado de Asturias&#39;, &#39;Región de Murcia&#39;], dtype=object)) . So 18 regions of Spain are represented at our .shp file (actually there are 17 regions + 2 autonomous cities in Spain). . map_df.columns . Index([&#39;ID_0&#39;, &#39;ISO&#39;, &#39;NAME_0&#39;, &#39;ID_1&#39;, &#39;NAME_1&#39;, &#39;TYPE_1&#39;, &#39;ENGTYPE_1&#39;, &#39;NL_NAME_1&#39;, &#39;VARNAME_1&#39;, &#39;geometry&#39;], dtype=&#39;object&#39;) . Geopandas supports easy to use plot function: . map_df.plot(); . Plot separately Spain without Islas Canarias: . map_df[map_df[&#39;NAME_1&#39;] != &#39;Islas Canarias&#39;].plot(); . Islas Canarias: . map_df[map_df[&#39;NAME_1&#39;] == &#39;Islas Canarias&#39;].plot(); . 2. COVID-19 data . Download official COVID-19 data provided by Spanish government by region/date by running following cell: . import requests covid_url = &#39;https://covid19.isciii.es/resources/serie_historica_acumulados.csv&#39; response = requests.get(covid_url) with open(&quot;spain.csv&quot;, &#39;wb&#39;) as file: file.write(response.content) . Read COVID-19 data . &#39;Magic number&#39; -8 reflects that so far 8 last strings are natural language notes, not a data. If you run code and receive value starting from &#39;NOTE1:&#39; at CCAA column - please change -8 to -9, -10 until you would not read those notes into DataFrame. NaN values replaced by zeros, because they they testify lack of known values at the moment. . df_covid = pd.read_csv(&#39;spain.csv&#39;, encoding=&#39;latin1&#39;)[:-8].fillna(0) ccaa_num = len(np.unique(df_covid[&#39;CCAA&#39;])) df_covid.tail(ccaa_num) . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 1653 AN | 17/5/2020 | 0.0 | 12458.0 | 3999.0 | 6178.0 | 761.0 | 1358.0 | 10671.0 | . 1654 AR | 17/5/2020 | 0.0 | 5503.0 | 1698.0 | 2659.0 | 267.0 | 838.0 | 3772.0 | . 1655 AS | 17/5/2020 | 0.0 | 2369.0 | 985.0 | 2328.0 | 153.0 | 317.0 | 1063.0 | . 1656 IB | 17/5/2020 | 0.0 | 1993.0 | 105.0 | 1136.0 | 169.0 | 218.0 | 1533.0 | . 1657 CN | 17/5/2020 | 0.0 | 2294.0 | 0.0 | 942.0 | 178.0 | 153.0 | 1537.0 | . 1658 CB | 17/5/2020 | 0.0 | 2271.0 | 503.0 | 1035.0 | 79.0 | 207.0 | 2287.0 | . 1659 CM | 17/5/2020 | 0.0 | 16648.0 | 8366.0 | 9066.0 | 637.0 | 2898.0 | 6392.0 | . 1660 CL | 17/5/2020 | 0.0 | 18512.0 | 6234.0 | 8717.0 | 551.0 | 1953.0 | 8716.0 | . 1661 CT | 17/5/2020 | 0.0 | 55921.0 | 1643.0 | 29421.0 | 2957.0 | 5956.0 | 26203.0 | . 1662 CE | 17/5/2020 | 0.0 | 116.0 | 59.0 | 11.0 | 4.0 | 4.0 | 163.0 | . 1663 VC | 17/5/2020 | 0.0 | 10914.0 | 3810.0 | 5469.0 | 725.0 | 1370.0 | 9970.0 | . 1664 EX | 17/5/2020 | 0.0 | 2948.0 | 1001.0 | 1775.0 | 110.0 | 500.0 | 2652.0 | . 1665 GA | 17/5/2020 | 0.0 | 9056.0 | 1926.0 | 2934.0 | 332.0 | 607.0 | 9204.0 | . 1666 MD | 17/5/2020 | 0.0 | 66302.0 | 5293.0 | 42283.0 | 3594.0 | 8863.0 | 40736.0 | . 1667 ML | 17/5/2020 | 0.0 | 121.0 | 13.0 | 44.0 | 3.0 | 2.0 | 125.0 | . 1668 MC | 17/5/2020 | 0.0 | 1556.0 | 1039.0 | 678.0 | 112.0 | 145.0 | 2180.0 | . 1669 NC | 17/5/2020 | 0.0 | 5178.0 | 3157.0 | 2045.0 | 136.0 | 503.0 | 3905.0 | . 1670 PV | 17/5/2020 | 0.0 | 13422.0 | 5358.0 | 7016.0 | 578.0 | 1466.0 | 16160.0 | . 1671 RI | 17/5/2020 | 0.0 | 4024.0 | 1393.0 | 1496.0 | 91.0 | 351.0 | 3107.0 | . We are interested in number of cases per region (CASOS column), but this column has NaN values. Explanation may be found in data description (in Spanish): . On 2020-04-25 two new PCR + and TestAC + variables are included with the number of positive results in PCR tests and in antibody tests (it is assumed that with symptoms) and NA is reported in some values of the variable Cases from 2020 -04-15. Although in previous versions it was assumed that only positives were considered confirmed by PCR, apparently this is not the case, so these values were replaced by the sum of PCR + and TestAC + (since 2020-04-28 Galicia already reports these two variables). . According to description above, CASOS = PCR+ + TestAc+ (however it may be the place of mistake - what if some individuals were taking both PCR and TestAc tests?): . df_covid[&#39;CASOS&#39;] = df_covid[&#39;PCR+&#39;] + df_covid[&#39;TestAc+&#39;] df_covid.tail(ccaa_num) . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 1653 AN | 17/5/2020 | 16457.0 | 12458.0 | 3999.0 | 6178.0 | 761.0 | 1358.0 | 10671.0 | . 1654 AR | 17/5/2020 | 7201.0 | 5503.0 | 1698.0 | 2659.0 | 267.0 | 838.0 | 3772.0 | . 1655 AS | 17/5/2020 | 3354.0 | 2369.0 | 985.0 | 2328.0 | 153.0 | 317.0 | 1063.0 | . 1656 IB | 17/5/2020 | 2098.0 | 1993.0 | 105.0 | 1136.0 | 169.0 | 218.0 | 1533.0 | . 1657 CN | 17/5/2020 | 2294.0 | 2294.0 | 0.0 | 942.0 | 178.0 | 153.0 | 1537.0 | . 1658 CB | 17/5/2020 | 2774.0 | 2271.0 | 503.0 | 1035.0 | 79.0 | 207.0 | 2287.0 | . 1659 CM | 17/5/2020 | 25014.0 | 16648.0 | 8366.0 | 9066.0 | 637.0 | 2898.0 | 6392.0 | . 1660 CL | 17/5/2020 | 24746.0 | 18512.0 | 6234.0 | 8717.0 | 551.0 | 1953.0 | 8716.0 | . 1661 CT | 17/5/2020 | 57564.0 | 55921.0 | 1643.0 | 29421.0 | 2957.0 | 5956.0 | 26203.0 | . 1662 CE | 17/5/2020 | 175.0 | 116.0 | 59.0 | 11.0 | 4.0 | 4.0 | 163.0 | . 1663 VC | 17/5/2020 | 14724.0 | 10914.0 | 3810.0 | 5469.0 | 725.0 | 1370.0 | 9970.0 | . 1664 EX | 17/5/2020 | 3949.0 | 2948.0 | 1001.0 | 1775.0 | 110.0 | 500.0 | 2652.0 | . 1665 GA | 17/5/2020 | 10982.0 | 9056.0 | 1926.0 | 2934.0 | 332.0 | 607.0 | 9204.0 | . 1666 MD | 17/5/2020 | 71595.0 | 66302.0 | 5293.0 | 42283.0 | 3594.0 | 8863.0 | 40736.0 | . 1667 ML | 17/5/2020 | 134.0 | 121.0 | 13.0 | 44.0 | 3.0 | 2.0 | 125.0 | . 1668 MC | 17/5/2020 | 2595.0 | 1556.0 | 1039.0 | 678.0 | 112.0 | 145.0 | 2180.0 | . 1669 NC | 17/5/2020 | 8335.0 | 5178.0 | 3157.0 | 2045.0 | 136.0 | 503.0 | 3905.0 | . 1670 PV | 17/5/2020 | 18780.0 | 13422.0 | 5358.0 | 7016.0 | 578.0 | 1466.0 | 16160.0 | . 1671 RI | 17/5/2020 | 5417.0 | 4024.0 | 1393.0 | 1496.0 | 91.0 | 351.0 | 3107.0 | . ccaa_num . 19 . Well, we have covid-19 data for 17+2 regions of Spain, but only 18 regions of Spain are represented in our .shp file. Via eyeballing we found out that CE (Ceuta) and ML (Melilla) regions should be merged. . df_tmp = df_covid[df_covid[&#39;CCAA&#39;].isin([&#39;CE&#39;, &#39;ML&#39;])] df_tmp.index = range(len(df_tmp)) df_tmp . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 0 CE | 20/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 1 ML | 20/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 CE | 21/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 ML | 21/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 4 CE | 22/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 171 ML | 15/5/2020 | 132.0 | 119.0 | 13.0 | 44.0 | 3.0 | 2.0 | 122.0 | . 172 CE | 16/5/2020 | 175.0 | 116.0 | 59.0 | 11.0 | 4.0 | 4.0 | 163.0 | . 173 ML | 16/5/2020 | 134.0 | 121.0 | 13.0 | 44.0 | 3.0 | 2.0 | 124.0 | . 174 CE | 17/5/2020 | 175.0 | 116.0 | 59.0 | 11.0 | 4.0 | 4.0 | 163.0 | . 175 ML | 17/5/2020 | 134.0 | 121.0 | 13.0 | 44.0 | 3.0 | 2.0 | 125.0 | . 176 rows × 9 columns . assert len(df_tmp) / 2 == len(df_covid) / ccaa_num . Create dataframe for CE_ML (&#39;Ceuta y Melilla&#39;) rows . df_covid_ce_ml = pd.DataFrame(columns=df_covid.columns) for idx in range(len(df_tmp) // 2): series_ce = df_tmp.iloc[2 * idx] series_ml = df_tmp.iloc[2 * idx + 1] series_ce_ml = pd.Series({&#39;CCAA&#39;: &#39;CE_ML&#39;, &#39;FECHA&#39;: series_ce.FECHA, &#39;CASOS&#39;: series_ce.CASOS + series_ml.CASOS, &#39;PCR+&#39;: series_ce[&#39;PCR+&#39;] + series_ml[&#39;PCR+&#39;], &#39;TestAc+&#39;: series_ce[&#39;TestAc+&#39;] + series_ml[&#39;TestAc+&#39;], &#39;Hospitalizados&#39;: series_ce.Hospitalizados + series_ml.Hospitalizados, &#39;UCI&#39;: series_ce.UCI + series_ml.UCI, &#39;Fallecidos&#39;: series_ce.Fallecidos + series_ml.Fallecidos, &#39;Recuperados&#39;: series_ce.Recuperados + series_ml.Recuperados}) df_covid_ce_ml = df_covid_ce_ml.append(series_ce_ml, ignore_index=True) . df_covid_ce_ml . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 0 CE_ML | 20/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 1 CE_ML | 21/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 CE_ML | 22/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 CE_ML | 23/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 4 CE_ML | 24/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 83 CE_ML | 13/5/2020 | 307.0 | 235.0 | 72.0 | 55.0 | 7.0 | 6.0 | 278.0 | . 84 CE_ML | 14/5/2020 | 307.0 | 235.0 | 72.0 | 55.0 | 7.0 | 6.0 | 279.0 | . 85 CE_ML | 15/5/2020 | 307.0 | 235.0 | 72.0 | 55.0 | 7.0 | 6.0 | 285.0 | . 86 CE_ML | 16/5/2020 | 309.0 | 237.0 | 72.0 | 55.0 | 7.0 | 6.0 | 287.0 | . 87 CE_ML | 17/5/2020 | 309.0 | 237.0 | 72.0 | 55.0 | 7.0 | 6.0 | 288.0 | . 88 rows × 9 columns . Drop CE and ML rows from df_covid dataframe. . df_covid_dropped = df_covid[df_covid[&#39;CCAA&#39;].isin( set(np.unique(df_covid[&#39;CCAA&#39;])).difference(set([&#39;CE&#39;, &#39;ML&#39;])))] df_covid_dropped . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 0 AN | 20/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 1 AR | 20/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 AS | 20/2/2020 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 IB | 20/2/2020 | 1.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 4 CN | 20/2/2020 | 1.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1666 MD | 17/5/2020 | 71595.0 | 66302.0 | 5293.0 | 42283.0 | 3594.0 | 8863.0 | 40736.0 | . 1668 MC | 17/5/2020 | 2595.0 | 1556.0 | 1039.0 | 678.0 | 112.0 | 145.0 | 2180.0 | . 1669 NC | 17/5/2020 | 8335.0 | 5178.0 | 3157.0 | 2045.0 | 136.0 | 503.0 | 3905.0 | . 1670 PV | 17/5/2020 | 18780.0 | 13422.0 | 5358.0 | 7016.0 | 578.0 | 1466.0 | 16160.0 | . 1671 RI | 17/5/2020 | 5417.0 | 4024.0 | 1393.0 | 1496.0 | 91.0 | 351.0 | 3107.0 | . 1496 rows × 9 columns . Add instead combined CE_ML rows . df_combined = df_covid_dropped.append(df_covid_ce_ml, ignore_index=True) df_combined[&#39;FECHA&#39;] = pd.to_datetime(df_combined[&#39;FECHA&#39;], dayfirst=True) df_combined = df_combined.sort_values(by=[&#39;FECHA&#39;], ignore_index=True) df_combined.tail(18) . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 1566 PV | 2020-05-17 | 18780.0 | 13422.0 | 5358.0 | 7016.0 | 578.0 | 1466.0 | 16160.0 | . 1567 AN | 2020-05-17 | 16457.0 | 12458.0 | 3999.0 | 6178.0 | 761.0 | 1358.0 | 10671.0 | . 1568 NC | 2020-05-17 | 8335.0 | 5178.0 | 3157.0 | 2045.0 | 136.0 | 503.0 | 3905.0 | . 1569 MC | 2020-05-17 | 2595.0 | 1556.0 | 1039.0 | 678.0 | 112.0 | 145.0 | 2180.0 | . 1570 MD | 2020-05-17 | 71595.0 | 66302.0 | 5293.0 | 42283.0 | 3594.0 | 8863.0 | 40736.0 | . 1571 GA | 2020-05-17 | 10982.0 | 9056.0 | 1926.0 | 2934.0 | 332.0 | 607.0 | 9204.0 | . 1572 EX | 2020-05-17 | 3949.0 | 2948.0 | 1001.0 | 1775.0 | 110.0 | 500.0 | 2652.0 | . 1573 VC | 2020-05-17 | 14724.0 | 10914.0 | 3810.0 | 5469.0 | 725.0 | 1370.0 | 9970.0 | . 1574 RI | 2020-05-17 | 5417.0 | 4024.0 | 1393.0 | 1496.0 | 91.0 | 351.0 | 3107.0 | . 1575 CT | 2020-05-17 | 57564.0 | 55921.0 | 1643.0 | 29421.0 | 2957.0 | 5956.0 | 26203.0 | . 1576 CM | 2020-05-17 | 25014.0 | 16648.0 | 8366.0 | 9066.0 | 637.0 | 2898.0 | 6392.0 | . 1577 CB | 2020-05-17 | 2774.0 | 2271.0 | 503.0 | 1035.0 | 79.0 | 207.0 | 2287.0 | . 1578 CN | 2020-05-17 | 2294.0 | 2294.0 | 0.0 | 942.0 | 178.0 | 153.0 | 1537.0 | . 1579 IB | 2020-05-17 | 2098.0 | 1993.0 | 105.0 | 1136.0 | 169.0 | 218.0 | 1533.0 | . 1580 AS | 2020-05-17 | 3354.0 | 2369.0 | 985.0 | 2328.0 | 153.0 | 317.0 | 1063.0 | . 1581 AR | 2020-05-17 | 7201.0 | 5503.0 | 1698.0 | 2659.0 | 267.0 | 838.0 | 3772.0 | . 1582 CL | 2020-05-17 | 24746.0 | 18512.0 | 6234.0 | 8717.0 | 551.0 | 1953.0 | 8716.0 | . 1583 CE_ML | 2020-05-17 | 309.0 | 237.0 | 72.0 | 55.0 | 7.0 | 6.0 | 288.0 | . 3. Comparison of active cases numbers by region . Let&#39;s visualize number of active cases by region. At firs we define function that extracts data by required region from all of our COVID-19 data. . def get_region_df(df, region_code): &quot;&quot;&quot; Returns region dataframe from whole country dataframe, computes &#39;CASOS_ACTIVOS&#39; column. &quot;&quot;&quot; df = df_combined[df_combined[&#39;CCAA&#39;] == region_code] df = df[[&#39;FECHA&#39;,&#39;CASOS&#39;, &#39;Fallecidos&#39;, &#39;Recuperados&#39;]].set_index(&#39;FECHA&#39;) df[&#39;CASOS_ACTIVOS&#39;] = df[&#39;CASOS&#39;] - df[&#39;Fallecidos&#39;] - df[&#39;Recuperados&#39;] return df . Let us get data from Madrid and show 5 last days, for example: . df_md = get_region_df(df_combined, &#39;MD&#39;) df_md.tail() . CASOS Fallecidos Recuperados CASOS_ACTIVOS . FECHA . 2020-05-13 70964.0 | 8779.0 | 40199.0 | 21986.0 | . 2020-05-14 71280.0 | 8809.0 | 40383.0 | 22088.0 | . 2020-05-15 71572.0 | 8826.0 | 40586.0 | 22160.0 | . 2020-05-16 71590.0 | 8847.0 | 40698.0 | 22045.0 | . 2020-05-17 71595.0 | 8863.0 | 40736.0 | 21996.0 | . Following is graph of number of active COVID-19 cases in Madrid, Cataluña and Castilla-La Mancha regions. . df_md = get_region_df(df_combined, &#39;MD&#39;) df_ct = get_region_df(df_combined, &#39;CT&#39;) df_cm = get_region_df(df_combined, &#39;CM&#39;) plt.plot(df_md[&#39;CASOS_ACTIVOS&#39;], label=&#39;Madrid&#39;); plt.plot(df_ct[&#39;CASOS_ACTIVOS&#39;], label=&#39;Cataluña&#39;); plt.plot(df_cm[&#39;CASOS_ACTIVOS&#39;], label=&#39;Castilla-La Mancha&#39;); plt.title(&#39;Covid-19 active cases&#39;) plt.legend(); . 4. Visualization of the last day of observations with reference to the map . In our case - May 17, 2020. . def long2short(long_code): return codes_dictionary[long_code] . Grab the last 18 rows of the COVID-19 dataframe. They represent information over regions of Spain at the last observation day. . df_covid_day = df_combined.iloc[-18:] df_covid_day . CCAA FECHA CASOS PCR+ TestAc+ Hospitalizados UCI Fallecidos Recuperados . 1566 PV | 2020-05-17 | 18780.0 | 13422.0 | 5358.0 | 7016.0 | 578.0 | 1466.0 | 16160.0 | . 1567 AN | 2020-05-17 | 16457.0 | 12458.0 | 3999.0 | 6178.0 | 761.0 | 1358.0 | 10671.0 | . 1568 NC | 2020-05-17 | 8335.0 | 5178.0 | 3157.0 | 2045.0 | 136.0 | 503.0 | 3905.0 | . 1569 MC | 2020-05-17 | 2595.0 | 1556.0 | 1039.0 | 678.0 | 112.0 | 145.0 | 2180.0 | . 1570 MD | 2020-05-17 | 71595.0 | 66302.0 | 5293.0 | 42283.0 | 3594.0 | 8863.0 | 40736.0 | . 1571 GA | 2020-05-17 | 10982.0 | 9056.0 | 1926.0 | 2934.0 | 332.0 | 607.0 | 9204.0 | . 1572 EX | 2020-05-17 | 3949.0 | 2948.0 | 1001.0 | 1775.0 | 110.0 | 500.0 | 2652.0 | . 1573 VC | 2020-05-17 | 14724.0 | 10914.0 | 3810.0 | 5469.0 | 725.0 | 1370.0 | 9970.0 | . 1574 RI | 2020-05-17 | 5417.0 | 4024.0 | 1393.0 | 1496.0 | 91.0 | 351.0 | 3107.0 | . 1575 CT | 2020-05-17 | 57564.0 | 55921.0 | 1643.0 | 29421.0 | 2957.0 | 5956.0 | 26203.0 | . 1576 CM | 2020-05-17 | 25014.0 | 16648.0 | 8366.0 | 9066.0 | 637.0 | 2898.0 | 6392.0 | . 1577 CB | 2020-05-17 | 2774.0 | 2271.0 | 503.0 | 1035.0 | 79.0 | 207.0 | 2287.0 | . 1578 CN | 2020-05-17 | 2294.0 | 2294.0 | 0.0 | 942.0 | 178.0 | 153.0 | 1537.0 | . 1579 IB | 2020-05-17 | 2098.0 | 1993.0 | 105.0 | 1136.0 | 169.0 | 218.0 | 1533.0 | . 1580 AS | 2020-05-17 | 3354.0 | 2369.0 | 985.0 | 2328.0 | 153.0 | 317.0 | 1063.0 | . 1581 AR | 2020-05-17 | 7201.0 | 5503.0 | 1698.0 | 2659.0 | 267.0 | 838.0 | 3772.0 | . 1582 CL | 2020-05-17 | 24746.0 | 18512.0 | 6234.0 | 8717.0 | 551.0 | 1953.0 | 8716.0 | . 1583 CE_ML | 2020-05-17 | 309.0 | 237.0 | 72.0 | 55.0 | 7.0 | 6.0 | 288.0 | . type(map_df) . geopandas.geodataframe.GeoDataFrame . Now add to GeoDataFrame map_df column cases - values that we would visualize. . map_df[&#39;cases&#39;] = pd.Series([df_covid_day[df_covid_day[&#39;CCAA&#39;] == long2short(code)][&#39;CASOS&#39;].iloc[0] for code in map_df[&#39;NAME_1&#39;]]) . map_df.head() . ID_0 ISO NAME_0 ID_1 NAME_1 TYPE_1 ENGTYPE_1 NL_NAME_1 VARNAME_1 geometry cases . 0 215 | ESP | Spain | 1 | Andalucía | Comunidad AutÃ³noma | Autonomous Community | None | Andalousie|AndalucÂ¡a|Andalusien|Andaluzia | MULTIPOLYGON (((-3.03014 35.94264, -3.03014 35... | 16457.0 | . 1 215 | ESP | Spain | 2 | Aragón | Comunidad AutÃ³noma | Autonomous Community | None | AragÃ£o|AragÃ³|AragÃ³n|Aragona|Aragonien | POLYGON ((-0.74582 42.92190, -0.74409 42.91921... | 7201.0 | . 2 215 | ESP | Spain | 3 | Cantabria | Comunidad AutÃ³noma | Autonomous Community | None | CantÃ bria|CantÃ¡bria|Cantabrie|Kantabrien | MULTIPOLYGON (((-3.28365 43.20003, -3.28500 43... | 2774.0 | . 3 215 | ESP | Spain | 4 | Castilla-La Mancha | Comunidad AutÃ³noma | Autonomous Community | None | Castela-La Mancha|Castela-Mancha|Castella-la M... | MULTIPOLYGON (((-3.36418 40.63507, -3.36655 40... | 25014.0 | . 4 215 | ESP | Spain | 5 | Castilla y León | Comunidad AutÃ³noma | Autonomous Community | None | Castile and Leon|Castela e LeÃ£o|Castella i Ll... | MULTIPOLYGON (((-2.83047 42.79212, -2.82676 42... | 24746.0 | . Following commented cell introduces other labels that also may be visualized via choropleth map. If interested in those values - uncomment following cell, and during visualization change value of var to corresponding value, e. g. hospitalized, dead or recovered. . # map_df[&#39;hospitalized&#39;] = pd.Series([df_covid_day[df_covid_day[&#39;CCAA&#39;] == long2short(code)][&#39;Hospitalizados&#39;] # for code in map_df[&#39;NAME_1&#39;]]) # map_df[&#39;dead&#39;] = pd.Series([df_covid_day[df_covid_day[&#39;CCAA&#39;] == long2short(code)][&#39;Fallecidos&#39;].iloc[0] # for code in map_df[&#39;NAME_1&#39;]]) # map_df[&#39;recovered&#39;] = pd.Series([df_covid_day[df_covid_day[&#39;CCAA&#39;] == long2short(code)][&#39;Recuperados&#39;].iloc[0] # for code in map_df[&#39;NAME_1&#39;]]) . df_mainland = map_df[map_df[&#39;NAME_1&#39;] != &#39;Islas Canarias&#39;] df_canarias = map_df[map_df[&#39;NAME_1&#39;] == &#39;Islas Canarias&#39;] . # variable to display var = &#39;cases&#39; # set the range for choropleth vmin, vmax = df_mainland[&#39;cases&#39;].min(), df_mainland[&#39;cases&#39;].max() # create figure and axes for Matplotlib fig, ax = plt.subplots(1, figsize=(20, 12)) # create map # df_mainland.plot(column=var, cmap=&#39;Blues&#39;, linewidth=0.8, ax=ax, edgecolor=&#39;0.8&#39;) df_mainland.plot(column=var, cmap=&#39;Blues&#39;, ax=ax) ax.set_title(f&quot;{var}&quot;, fontdict={&#39;fontsize&#39;: &#39;25&#39;, &#39;fontweight&#39;: &#39;3&#39;}); # create colorbar as legend sm = plt.cm.ScalarMappable(cmap=&#39;Blues&#39; ,norm=plt.Normalize(vmin=vmin, vmax=vmax)) # empty array for the data range sm._A = [] # add the colorbar to the figure cbar = fig.colorbar(sm) # save to file # plt.savefig(&#39;cases_spain_may_17.png&#39;) . 5. Conclusion . In this Notebook we have downloaded COVID-19 data in over Spain regions and map of Spain and combined this data into choropleth map. GeoPandas provides very intuitive way to handle shape files, simplifies data processing and allows to produce publication quality plots. That&#39;s it! .",
            "url": "https://calmscout.github.io/blog/2020/05/20/Spain-covid19-map.html",
            "relUrl": "/2020/05/20/Spain-covid19-map.html",
            "date": " • May 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://calmscout.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://calmscout.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://calmscout.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calmscout.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}